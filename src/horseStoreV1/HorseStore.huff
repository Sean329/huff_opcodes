// 60008060093d393df3 -- contract creation bytecode
// translate to "take the binary after me, and stick it onchain"

/* Interface */
#define function updateHorseNumber(uint256) nonpayable returns()
#define function readNumberOfHorses() view returns (uint256)

#define constant NUMBER_OF_HORSES_STORAGE_SLOT = FREE_STORAGE_POINTER()

#define macro MAIN() = takes(0) returns(0) {
    0x00 //the PUSH opcode is ignored because Huff knows it; Top [0] Bottom
    // 0x02 // [2,0]
    calldataload // [calldata(32)]
    0xe0 // 224 bits or say 28 bytes to right shift, because we only want to keep the first 4 bytes of calldata 
            // which is meant to be the function selector; [0xe0, calldata(32)]
    shr // [function_selector]
    

    // Jump -> function data associated with the selector
    // cast sig "updateHorseNumber(uint256)" -> 0xcdfead2e 
    // cast sig "readNumberOfHorses()" -> 0xe026c017

    dup1 // [function_selector, function_selector] 每次操作都会消耗掉一个function selector，所以复制相应个数备用
    __FUNC_SIG(updateHorseNumber) // [0xcdfead2e, function_selector, function_selector]
    eq // [true if func selector matches]
    // Jump to updateHorseNumber if true
    updateJump // [updateHorseNumberProgramConter, true/false, function_selector]
    jumpi // [function_selector]

    __FUNC_SIG(readNumberOfHorses) // [0xe026c017, function_selector]
    eq // [true if func selector matches]
    readJump // [readHorseNumberProgramConter, true/false]
    jumpi // []

    0x00 0x00 revert // []

    updateJump:
        SET_NUMBER_OF_HORSES()

    readJump:
        READ_NUMBER_OF_HORSES()
}

#define macro SET_NUMBER_OF_HORSES() = takes(0) returns(0){
    
    // 1. get the value to store from calldata
    0x04 // [4] # of bytes to offset the calldata, from left, use 4 because function selector is 4 bytes
    calldataload // [value, function_selector(当初复制剩下的)]
    
    // 2. give it a storage slot
    [NUMBER_OF_HORSES_STORAGE_SLOT] // [storage_slot, value, function_selector(当初复制剩下的)]

    // 3. sstore opcode
    sstore // [function_selector(当初复制剩下的)]
    stop
}

#define macro READ_NUMBER_OF_HORSES() = takes(0) returns(0){
    // 1. get the storage slot
    [NUMBER_OF_HORSES_STORAGE_SLOT] // [storage_slot]
    // 2. load the value into memory
    sload // [value]
    0x00 // [0, value] 
    mstore // [] ; memory: [value]
    // 3. return
    0x20 // [32]
    0x00 // [0, 32]
    return //[]

}